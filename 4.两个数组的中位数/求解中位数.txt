题目描述： 输入两个已排序的数组，大小为m和n。目标是在O(log(n+m))的时间复杂度下求得中位数。

初步思路： 在时间复杂度为O(n+m)的情况下，两数组合并从小数到1/2*(n+m)处得到结果。
					 通过2分查找的方法来实现优化？
					 
算法过程： 假设n>m 假设中位数的下标为pos在n中 初始假设所有m都大于n[max]. 那么pos初始为(n+m)/2 m中每有一个数小于n[pos] pos就要左移一次。那么就要在m中找到的第一个大于n[p]的数 那么就算是找到了中位数，这便是m中的2分查找。。。(判断的条件就是 n(p)<=m(i)&& (m(i)-n(p))*(m(i+1)-n(p-1)) <= 0;
						